
dir("") - list of all method can be used
help("") - list of all reference of the object

__init__(self)
__str__(self) --> print(object) => set to get custom print string
"""docstring""" in method
help(object)

always initialize mutable value in constructor(__init__)

to create submodules -> create a folder -> put all py files in it. create __init__.py file
module:
	shutil.disk_usage
	psutil.cpu_percent(0.5) # seconds

rules of automation

time to automate < time to perfom*amount of times done

1 hour to create automation (60 minutes)
5 minute a day to perform

60 minute / 5 = 12 days saved when using the automation

pareto principal - 20% of automation contribute to 80% of your daily work

readline() // read a line from current position
read() // read line until end from current position
readlines() // read a line and return a list of that line 

list.sort() // sort content of list directly to the list
sorted(list) // sort content of list and create new list of sorted value

os module
os.remove("filename")
os.rename("filename", "new_filename")
os.path.exists("filename") 
os.path.getsize("filename") // get file size
os.path.getmtime("filename") // get file timestamp
os.path.isfile(filename)

use datetime module to get readable timestamp
datetime.datetime.fromtimestamp(os.path.gettmstamp("filename"))

os.path.abspath("filename") // get the full path of the file

os.rmdir(dir)
os.mkdir(dir)

os.listdir(dir) // return all files and subdirectory in the dir
os.path.join(dir, name) // work for all os
os.path.isdir(dir)

export Fruit="fruit" // add variable to environment
os.environ

wc file // word count
echo $? // show exit code for last program

subprocess.run - use when we dont care what is the output
result = subprocess.run([], capture_output=True) - output will in arry of byte. to convert it, use result.stdout.decode()
result.returncode
result.stdout
result.stderr

os.environ is a dictionary
os.environ.copy() - copy current evironment

my_env = os.environ.copy()
my_env["PATH"] = os.pathsep.join(["opt/myapp/", my_env["PATH"]])
result = subprocess.run(["myapp"], env=my_env)

subprocess run with secondary environment
suprocess will lock parent process until it finish execution

raise ValueError("msg") - use for what we expect to happen during normal execution
assert - use for verify the condition that is not expected 

cp ../spyder -> refer to parent folder relative to current folder
ls -l
ls -la
rm * // remove all file in current dir
> // redirect the output of the script
>> // add new line if file exists
< // input stream 
2> // error redirect
ls -l | less // piping to paging command
cat spyder.txt |
tr ' ' '\n' | // translate ' ' to '\n'
sort |
uniq -c | // uniq word -c stand for count the word
sort -nr | // sort numerical and reverse
head // show print 10 line to stdin

sys.stdin // read content of pipe input
cat haiku.txt | ./capitalize.py

ctrl^c - SIGINT - interrupt the process cleanly
ctrl^Z - SIGSTOP - terminate the process un clean // fg to continue the process
KILL - SIGTERM - kill pid 
ps ax | // get all running process in current computer
grep // filter for process

uptime // how long computer is running
free // show free space
who // show user login

glob - special char * and ?
variable in bash: example=hello
$example // hello

$? check for exit status in bash
bash use exit status to do conditional

if grep "127.0.0.1" /etc/hosts; then
  echo "success"
else
  echo " failed" 
fi 